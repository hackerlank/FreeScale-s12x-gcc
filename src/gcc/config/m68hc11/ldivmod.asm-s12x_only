;;;-----------------------------------------

;;;  Hand coded div and mod functions.
;;;  AES 2009
 	
;;;-----------------------------------------



	
	.file "ldivmod.asm"

#ifdef __HAVE_SHORT_INT__
	.mode mshort
#else
	.mode mlong
#endif

	.macro declare_near name
	.globl \name
	.type  \name,@function
	.size  \name,.Lend-\name
\name:
	.endm

#if defined(__USE_RTC__)
# define ARG(N) N+1

	.macro ret
#if defined(mc68hc12)
	rtc
#else
	jmp __return_32
#endif
	.endm

	.macro declare name
	.globl \name
	.type  \name,@function
	.size  \name,.Lend-\name
	.far   \name
\name:
	.endm

	.macro farsym name
	.far NAME
	.endm

#else
# define ARG(N) N

	.macro ret
	rts
	.endm

	.macro farsym name
	.endm

	.macro declare name
	.globl \name
	.type  \name,@function
	.size  \name,.Lend-\name
\name:
	.endm

#endif

	.sect .text
	

#define REG(NAME)			\
NAME:	.dc.w	1;			\
	.type NAME,@object ;		\
	.size NAME,2

#ifdef L_regs_min
/* Pseudo hard registers used by gcc.
   They should be located in page0.  */

	.sect .softregs
	.globl _.tmp

REG(_.tmp)
#endif



/* ok, guessing that we get called with a in D and X and B on stack */

;;; 
;;; long __divsi3 ( long num, long den )
;;;

;;; d == num_low
;;; x == num_high

;;; sp, ARG(4)  == den_high
;;; sp, ARG(6)  == den_low
;;; return result in XD

;;; calling here we have also pushed 4 extra bytes on stack
;;;  and we dont use a frame pointer


udivmodsi:
	pshy				; preserve y
	pshd				; save numerator in case ediv fails
	pshx
	tstw 	ARG(10), sp		; does denominator fit in uint16 ?
	bne 	go_soft_udivmodsi
	tfr 	x,y			; load num_high into y
	ldx	ARG(12), sp		; load denominator into x
	ediv
	bvs	go_soft_udivmodsi 	; overflow ??

	;; overwrite denominator on stack with modulus
	;; this is ok since c copies args onto stack  (???CHECKME)

	std	ARG(12), sp
	clrw 	ARG(10), sp

	;; return division  results in X:D
	clrx
	tfr	y,d
	
	leas 	4, sp		  	; deallocate stack for numerator save
	puly				; retrieve y
	rts

go_soft_udivmodsi:	
	clry
	bra 	soft_udivmodsi
	

divmodsi:	

	pshy			; preserve y
	pshd			; save numerator in case edivs fails
	pshx
	ldy	ARG(10),sp	; denominator fits in signed int16  ??
	beq	test_pos
	comy
	beq	test_neg
	bra	soft_divmodsi
test_pos:	
	ldy	ARG(12),sp
	bpl	hard_divmodsi 	
	bra	soft_divmodsi

test_neg:
	ldy	ARG(12),sp
	bpl	soft_divmodsi
	
hard_divmodsi:
	
	exg 	x,y
	edivs			; attempt a divide by hardware
	bvs  	soft_divmodsi     	; an overflow happened ... do soft divide

	clrw 	ARG(10),sp
	std	ARG(12), sp
	bpl	skip_hdsx_mod   ; sign extend modulus
	movw	#0xFFFF, ARG(10), sp 	
skip_hdsx_mod:	


	;; returned division  results in X:D
	clrx
	tsty
	bpl	skip_hdsx_div   ; sign extend result
	ldx    #0xFFFF
	
skip_hdsx_div:	
	tfr	y,d	
	leas    4,sp		; deallocate stack
	puly			; retrieve y
	rts

soft_divmodsi:
	;; numerator in sp and sp+1 ; den in ARG(10) and ARG(12)
	clry	              ; use y to evaluate sign of result
	tstw	0, sp
	bpl	sd_skip_neg_num

	ory    #3
	comw	2, sp
	comw  	0, sp
	incw	2, sp
	bne	sd_skip_neg_num
	incw	0, sp

	
sd_skip_neg_num:

	tstw 	ARG(10), sp
	bpl	sd_skip_neg_den

	eory	#1
	comw 	ARG(12), sp
	comw 	ARG(10),  sp
	incw	ARG(12), sp
	bne	sd_skip_neg_den
	incw	ARG(10),  sp
	

sd_skip_neg_den:
soft_udivmodsi:	    		; if called from udivmodsi
				; make sure y=0  
	leas -8,sp		; allocate for 'bit' and 'res' 
	
	;; stack should look like this on entry if  ARG(N)=N:

	;; 
	;; 
	;; 
	;; denominator (SI)                             ---  sp+18
	;; 
	;; return address for calling function  (HI)   sp+16
	;; 
	;; return address for frontend  function (HI) sp+14
	;;
	;; preserve y	   ----  sp+12
	;; 
	;; 
	;; 
	;; numerator (SI)  ----  sp+8
	;;
	;;
	;;
	;; bit (SI)        ----  sp+4
	;;
	;; 
	;; 
	;; res (SI)        ----  sp
	
	clrw 	0, sp		; res = 0
	clrw	2, sp

	tstw	ARG(18),sp
	bne     checked_den
	tstw	ARG(20),sp
	beq	while_end 	
	
checked_den:	

	movw	#1, 6, sp
	clrw	4,sp            ; bit = 1

while_den:			; while ((den < num) && !(den.bit31))
	tstw	ARG(18), sp
	bmi 	while_bit
	ldd	10,sp
	ldx	8,sp

	subd 	ARG(20), sp
	sbex	ARG(18), sp
	bcs	while_bit

	aslw	ARG(20), sp     ;  den <<= 1
	rolw	ARG(18), sp

	aslw	6,sp		; bit <<= 1
	rolw	4,sp			

	bra	while_den


while_bit:			; while  (bit!=0)
	tstw	4, sp
	bne	while_bit_ok
	tstw	6,sp
	beq	while_end

while_bit_ok:
	
	ldd 	10, sp		; if (num >= den) 
	ldx	8, sp
	subd	ARG(20),sp
	sbex	ARG(18),sp
	bcs	skip_restore   	; here was bmi

	std	10,sp		; num-=den
	stx	8,sp

	ldx	0,sp		; res|= bit
	orx	4,sp
	stx	0,sp
	ldx	2,sp
	orx	6,sp
	stx	2,sp

skip_restore:
	
	lsrw	4,sp 		; bit >>=1
	rorw	6,sp		
	
	lsrw	ARG(18),sp		; den >>=1
	rorw	ARG(20),sp
	
	bra while_bit
	
while_end:
	;; numerator contains mod
	;; overwrite denominator with it on stack for return
//	movw	8,sp,ARG(18), sp 
//	movw	10,sp, ARG(20), sp
	leax	ARG(18), sp
	movw	8,sp, 0,x
	movw	10,sp, 2,x
	
	ldx	0,sp
	ldd 	2,sp

	leas	12,sp 		; deallocate locals
	tsty			; do we need to negate result ?
	beq	end_division    
					
	;; 	if y&1 then negate result
	;; 	if y&2 then negate modulus

	pshy
	andy	#1
	puly
	beq	skip_end_res_neg
	
	coma
	comb
	comx
	incb
	bne	end_division
	inca	
	bne	end_division
	incx	

skip_end_res_neg:
	andy	#2
	beq	end_division

	comw 	ARG(6), sp
	comw 	ARG(8),  sp
	incw	ARG(8), sp
	bne	end_division
	incw	ARG(6),  sp

	
end_division:
	puly
	rts


	
;;;  si3 frontends for divmodsi3
	
	declare __divsi3
	bsr	divmodsi
	ret
	
	declare __modsi3

	bsr 	divmodsi
	ldx	ARG(2), sp	; stack has two less on it now
	ldd	ARG(4), sp	
	ret

	declare __umodsi3
	bsr 	udivmodsi
	ldx	ARG(2), sp
	ldd	ARG(4), sp	
	ret
	
	
	declare __udivsi3
	bsr 	udivmodsi
	ret
	

.Lend:
;-----------------------------------------
; end required gcclib code
;-----------------------------------------
